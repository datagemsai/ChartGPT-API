[[query_responses]]
query = "What data is available?"
sql = """
SELECT *
FROM `chartgpt-staging.metaquants_nft_finance_aggregator.p2p_and_p2pool_loan_data_borrow`
WHERE `date` >= TIMESTAMP(DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH))
LIMIT 100000;
"""
code = """
import pandas as pd


def answer_question(df: pd.DataFrame) -> pd.DataFrame:
    return df.describe()
"""

[[query_responses]]
query = "Show me a scatter plot of residual sugar against fixed acidity colored by wine quality."
sql = """
SELECT `residual_sugar`, `fixed_acidity`, `quality`
FROM `chartgpt-staging.wine_dataset.wine_table`
WHERE `date` >= TIMESTAMP(DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH))
LIMIT 100000;
"""
code = """
import plotly
import plotly.express as px
import pandas as pd


def answer_question(df: pd.DataFrame) -> plotly.graph_objs.Figure:
    fig = px.scatter(df, x='residual_sugar', y='fixed_acidity', color='quality')
    return fig
"""

[[query_responses]]
query = "Plot a histogram of the ages of Titanic passengers."
sql = """
SELECT `Age`
FROM `chartgpt-staging.titanic_dataset.titanic_table`
WHERE `date` >= TIMESTAMP(DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH))
LIMIT 100000;
"""
code = """
import plotly
import plotly.express as px
import pandas as pd


def answer_question(df: pd.DataFrame) -> plotly.graph_objs.Figure:
    fig = px.histogram(df, x='Age')
    return fig
"""

[[query_responses]]
query = "Can you plot a histogram of the median value of owner-occupied homes for the Boston Housing dataset?"
sql = """
SELECT `MEDV`
FROM `chartgpt-staging.boston_housing_dataset.boston_housing_table`
WHERE `date` >= TIMESTAMP(DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH))
LIMIT 100000;
"""
code = """
import plotly
import plotly.express as px
import pandas as pd


def answer_question(df: pd.DataFrame) -> plotly.graph_objs.Figure:
    fig = px.histogram(df, x='MEDV')
    return fig
"""

[[query_responses]]
query = "Show a scatter plot of age against BMI in the Diabetes dataset."
sql = """
SELECT `age`, `bmi`
FROM `chartgpt-staging.diabetes_dataset.diabetes_table`
WHERE `date` >= TIMESTAMP(DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH))
LIMIT 100000;
"""
code = """
import plotly
import plotly.express as px
import pandas as pd


def answer_question(df: pd.DataFrame) -> plotly.graph_objs.Figure:
    fig = px.scatter(df, x='age', y='bmi')
    return fig
"""

[[query_responses]]
query = "Show me a box plot of area (mean of worst) for malignant and benign tumors in the Breast Cancer dataset."
sql = """
SELECT `area_worst`, `diagnosis`
FROM `chartgpt-staging.breast_cancer_dataset.breast_cancer_table`
WHERE `date` >= TIMESTAMP(DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH))
LIMIT 100000;
"""
code = """
import pandas as pd
import plotly.express as px
import plotly


def answer_question(df: pd.DataFrame) -> plotly.graph_objs.Figure:
    fig = px.box(df, x='diagnosis', y='area_worst')
    return fig
"""

[[query_responses]]
query = "How many unique cabins are listed in the Titanic dataset?"
sql = """
SELECT COUNT(DISTINCT `Cabin`) as unique_cabins
FROM `chartgpt-staging.titanic_dataset.titanic_table`
WHERE `date` >= TIMESTAMP(DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH));
"""
code = """
import pandas as pd


def answer_question(df: pd.DataFrame) -> int:
    unique_cabins = df['Cabin'].nunique()
    return unique_cabins
"""

[[query_responses]]
query = "What's the maximum tax rate in the Boston Housing dataset?"
sql = """
SELECT MAX(`TAX`) as max_tax
FROM `chartgpt-staging.boston_housing_dataset.boston_housing_table`
WHERE `date` >= TIMESTAMP(DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH));
"""
code = """
import pandas as pd


def answer_question(df: pd.DataFrame) -> float:
    max_tax = df['TAX'].max()
    return max_tax
"""

[[query_responses]]
query = "Can you provide a summary of age for survivors and non-survivors in the Titanic dataset?"
sql = """
SELECT `Survived`, AVG(`Age`) as average_age, MIN(`Age`) as min_age, MAX(`Age`) as max_age
FROM `chartgpt-staging.titanic_dataset.titanic_table`
WHERE `date` >= TIMESTAMP(DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH))
GROUP BY `Survived`;
"""
code = """
import pandas as pd


def answer_question(df: pd.DataFrame) -> pd.DataFrame:
    age_summary = df.groupby('Survived')['Age'].describe()
    return age_summary
"""

[[query_responses]]
query = "Show the trend in NFT lending APRs, and project what they might be over the next 3 months."
sql = "SELECT `apr`, `block_timestamp` FROM `metaquants_nft_finance_aggregator.p2p_and_p2pool_loan_data_borrow` WHERE `block_timestamp` >= TIMESTAMP(DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH)) ORDER BY `block_timestamp` ASC"
code = """
import pandas as pd
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
from datetime import timedelta
import plotly.graph_objs as go
import plotly.express as px


def answer_question(df: pd.DataFrame) -> plotly.graph_objs.Figure:
    # Remove rows with missing APR values
    df = df.dropna(subset=['apr'])

    # Convert block_timestamp to days
    df['days'] = (df['block_timestamp'] - df['block_timestamp'].min()).dt.days

    # Fit a linear regression model to the data
    model = LinearRegression()
    model.fit(df[['days']], df['apr'])

    # Make a projection for the next 3 months
    future = pd.DataFrame({'days': range(df['days'].max()+1, df['days'].max()+1+90)})
    future['apr'] = model.predict(future[['days']])

    # Plot the data and the projection
    fig = px.scatter(df, x='days', y='apr')
    fig.add_trace(go.Scatter(x=future['days'], y=future['apr'], mode='lines'))

    return fig
"""

[[query_responses]]
query = "Plot the average APR for the NFTfi protocol over the past 3 months."
sql = "SELECT DATE(block_timestamp) as date, AVG(apr) as average_apr FROM `metaquants_nft_finance_aggregator.p2p_and_p2pool_loan_data_borrow` WHERE block_timestamp >= TIMESTAMP(DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH)) AND LOWER(protocol) = LOWER('NFTfi') GROUP BY date ORDER BY date"
code = """
import plotly
import plotly.express as px
import pandas as pd

def answer_question(df: pd.DataFrame) -> plotly.graph_objs.Figure:
    fig = px.line(df, x='date', y='average_apr', title='Average APR for NFTfi protocol over the past 3 months')
    return fig
"""
