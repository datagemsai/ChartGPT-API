[[examples]]
data_source_url = "bigquery/chartgpt-staging/real_estate/usa_real_estate_listings_synthetic"
query = "Based on the number of bedrooms and the zip code, what is the average selling price of similar properties in the past 6 months?"
sql = """
SELECT `bed`, `zip_code`, AVG(`price`) as average_price FROM `real_estate.usa_real_estate_listings_synthetic` WHERE `list_date` >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH) GROUP BY `bed`, `zip_code`
"""
code = """
def answer_question(df: pd.DataFrame) -> pd.DataFrame:
    result_df = df.groupby(['bed', 'zip_code']).mean().reset_index()
    return result_df
"""

[[examples]]
data_source_url = "bigquery/chartgpt-staging/real_estate/usa_real_estate_listings_synthetic"
query = "Which properties have had more than 50% of their total viewings in the past 3 days, indicating a recent surge in interest?"
sql = """
SELECT `property_id`, `web_visits`, `views_last_3_days` FROM `real_estate.usa_real_estate_listings_synthetic` WHERE `views_last_3_days` > 0.5 * `web_visits`
"""
code = """
def answer_question(df: pd.DataFrame) -> pd.DataFrame:
    return df
"""

[[examples]]
data_source_url = "bigquery/chartgpt-staging/real_estate/usa_real_estate_listings_synthetic"
query = "Do properties with furnishings typically have a higher number of viewings or faster sales compared to unfurnished properties?"
sql = """
SELECT `furnished`, AVG(`physical_viewings`) as avg_physical_viewings, AVG(`sale_duration`) as avg_sale_duration FROM `real_estate.usa_real_estate_listings_synthetic` WHERE `list_date` >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH) GROUP BY `furnished`
"""
code = """
def answer_question(df: pd.DataFrame) -> pd.DataFrame:
    return df
"""

[[examples]]
data_source_url = "bigquery/chartgpt-staging/real_estate/usa_real_estate_listings_synthetic"
query = "Based on zip code and the number of bedrooms, what is the best day of the week to list a property to maximize website visits?"
sql = """
SELECT `zip_code`, `bed`, EXTRACT(DAYOFWEEK FROM `list_date`) as day_of_week, COUNT(*) as num_listings FROM `chartgpt-staging.real_estate.usa_real_estate_listings_synthetic` WHERE `list_date` >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH) GROUP BY `zip_code`, `bed`, day_of_week ORDER BY `zip_code`, `bed`, num_listings DESC
"""
code = """

def answer_question(df: pd.DataFrame) -> pd.DataFrame:
    df_sorted = df.sort_values('num_listings', ascending=False)
    df_dropped_duplicates = df_sorted.drop_duplicates(subset=['zip_code', 'bed'])
    return df_dropped_duplicates[['zip_code', 'bed', 'day_of_week']]

"""

[[examples]]
data_source_url = "bigquery/chartgpt-staging/real_estate/usa_real_estate_listings_synthetic"
query = "What percentage of website visits for a property convert into actual physical viewings? How does this vary by zip code or number of bedrooms?"
sql = """
SELECT SUM(`web_visits`) as total_web_visits, SUM(`physical_viewings`) as total_physical_viewings FROM `real_estate.usa_real_estate_listings_synthetic`
"""
code = """
def answer_question(df: pd.DataFrame) -> float:
    conversion_rate = df['total_physical_viewings'][0] / df['total_web_visits'][0] * 100
    return conversion_rate
"""

[[examples]]
data_source_url = "bigquery/chartgpt-staging/real_estate/usa_real_estate_listings_synthetic"
query = "In which zip codes do we have an oversupply or undersupply of properties with a specific number of bedrooms?"
sql = """
SELECT `zip_code`, `bed`, COUNT(*) as property_count FROM `real_estate.usa_real_estate_listings_synthetic` WHERE `list_date` >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH) GROUP BY `zip_code`, `bed`
"""
code = """

def answer_question(df: pd.DataFrame) -> pd.DataFrame:
    # Calculate the average property count across all zip codes
    avg_property_count = df['property_count'].mean()

    # Create a new column indicating whether there is an oversupply or undersupply of properties
    df['supply_status'] = np.where(df['property_count'] > avg_property_count, 'Oversupply', 'Undersupply')

    return df

"""

[[examples]]
data_source_url = "bigquery/chartgpt-staging/real_estate/usa_real_estate_listings_synthetic"
query = "For properties that have had more than 10 viewings, how long, on average, does it take to sell them? Does this duration change when considering the number of bedrooms or furnishing status?"
sql = """
SELECT AVG(`sale_duration`) as average_sale_duration FROM `real_estate.usa_real_estate_listings_synthetic` WHERE `physical_viewings` > 10
"""
code = """

def answer_question(df: pd.DataFrame) -> float:
    average_sale_duration = df['average_sale_duration'].values[0]
    return average_sale_duration

"""

[[examples]]
data_source_url = "bigquery/chartgpt-staging/real_estate/usa_real_estate_listings_synthetic"
query = "For properties with feedback from viewings, what common characteristics or features are frequently mentioned as positives or negatives, and how do these feedback points correlate with the number of bedrooms or furnishings?"
sql = """
SELECT `feedback` FROM `chartgpt-staging.real_estate.usa_real_estate_listings_synthetic` WHERE `feedback` IS NOT NULL
"""
code = """

import pandas as pd
from collections import Counter
import re
from sklearn.feature_extraction.text import CountVectorizer

def answer_question(df: pd.DataFrame) -> List[str]:
    # Remove None values
    df = df.dropna()
    
    # Initialize the CountVectorizer object
    vectorizer = CountVectorizer(stop_words='english')
    
    # Fit and transform the data
    feedback_data = vectorizer.fit_transform(df['feedback'])
    
    # Get feature names
    feature_names = vectorizer.get_feature_names_out()
    
    # Summarize the data
    feedback_sum = feedback_data.sum(axis=0)
    
    # Create a dictionary of word frequencies
    word_freq = {word: freq for word, freq in zip(feature_names, feedback_sum)}
    
    # Sort the dictionary by frequency
    sorted_word_freq = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)
    
    # Get the top 10 most common words
    common_words = [word for word, freq in sorted_word_freq[:10]]
    
    return common_words

"""

[[examples]]
data_source_url = "bigquery/chartgpt-staging/real_estate/usa_real_estate_listings_synthetic"
query = "Are there specific months or seasons where properties in certain zip codes or with a certain number of bedrooms are viewed or sold more frequently?"
sql = """
SELECT EXTRACT(MONTH FROM `list_date`) as month, `zip_code`, COUNT(*) as property_count FROM `real_estate.usa_real_estate_listings_synthetic` WHERE `list_date` >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 YEAR) GROUP BY month, `zip_code` ORDER BY month, property_count DESC
"""
code = """

def answer_question(df: pd.DataFrame) -> plotly.graph_objs._figure.Figure:
    # Create a pivot table with months as columns, zip codes as rows, and property counts as values
    pivot_df = df.pivot(index='zip_code', columns='month', values='property_count')
    
    # Create a heatmap to visualize the data
    fig = px.imshow(pivot_df, labels=dict(x='Month', y='Zip Code', color='Property Count'), title='Number of Properties Listed per Month for Each Zip Code')
    
    return fig

"""

