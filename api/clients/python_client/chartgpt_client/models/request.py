# coding: utf-8

"""
    ChartGPT API

    The ChartGPT API is a REST API that generates insights from data based on natural language questions.

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field
from chartgpt_client.models.output_type import OutputType

class Request(BaseModel):
    """
    Request
    """
    data_source_url: Optional[Any] = Field(None, description="The data source URL based on which the response will be generated. The entity is optional. If not specified, the default data source will be used.")
    session_id: Optional[Any] = Field(None, description="The job ID of the request.")
    max_attempts: Optional[Any] = Field(None, description="The maximum number of attempts to generate an output.")
    max_outputs: Optional[Any] = Field(None, description="The maximum number of outputs to generate.")
    max_tokens: Optional[Any] = Field(None, description="The maximum number of tokens to use for generating an output.")
    messages: Optional[Any] = Field(None, description="The messages based on which the response will be generated.")
    output_type: Optional[OutputType] = None
    __properties = ["data_source_url", "session_id", "max_attempts", "max_outputs", "max_tokens", "messages", "output_type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Request:
        """Create an instance of Request from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if data_source_url (nullable) is None
        # and __fields_set__ contains the field
        if self.data_source_url is None and "data_source_url" in self.__fields_set__:
            _dict['data_source_url'] = None

        # set to None if session_id (nullable) is None
        # and __fields_set__ contains the field
        if self.session_id is None and "session_id" in self.__fields_set__:
            _dict['session_id'] = None

        # set to None if max_attempts (nullable) is None
        # and __fields_set__ contains the field
        if self.max_attempts is None and "max_attempts" in self.__fields_set__:
            _dict['max_attempts'] = None

        # set to None if max_outputs (nullable) is None
        # and __fields_set__ contains the field
        if self.max_outputs is None and "max_outputs" in self.__fields_set__:
            _dict['max_outputs'] = None

        # set to None if max_tokens (nullable) is None
        # and __fields_set__ contains the field
        if self.max_tokens is None and "max_tokens" in self.__fields_set__:
            _dict['max_tokens'] = None

        # set to None if messages (nullable) is None
        # and __fields_set__ contains the field
        if self.messages is None and "messages" in self.__fields_set__:
            _dict['messages'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Request:
        """Create an instance of Request from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Request.parse_obj(obj)

        _obj = Request.parse_obj({
            "data_source_url": obj.get("data_source_url"),
            "session_id": obj.get("session_id"),
            "max_attempts": obj.get("max_attempts"),
            "max_outputs": obj.get("max_outputs"),
            "max_tokens": obj.get("max_tokens"),
            "messages": obj.get("messages"),
            "output_type": obj.get("output_type")
        })
        return _obj


